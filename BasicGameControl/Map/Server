_G.isRanked = game.PrivateServerId ~= "" and game.PrivateServerOwnerId == 0
if _G.isRanked then
	script.Parent.RankedMatchService.Disabled = false
end
if not game["Run Service"]:IsStudio() then
	workspace.Studio:Destroy()
end
if not _G.isRanked then
	if game["Run Service"]:IsStudio() then
		local fo = script.StudioMap:Clone()
		fo.Name = "Map"
		fo.Parent = workspace
	else
		script.Map.Parent = workspace
	end
else
	local fo = script.RankedMatchMap:Clone()
	fo.Name = "Map"
	fo.Parent = workspace
end

workspace.Studio:Destroy()

if _G.isRanked then
	workspace.Map.Parent = nil
	local fo = script.RankedMatchMap:Clone()
	fo.Name = "Map"
	fo.Parent = workspace
end

local HeightModule = require(game.ServerScriptService.Modules.HeightModule)
local Assets = game.ReplicatedStorage.Assets
local Sounds = Assets.Sounds

local ServerShutdown

for i, v in pairs(workspace.LivingThings:GetChildren()) do
	for a,b in pairs(Sounds:GetChildren()) do
		b:Clone().Parent = v.PrimaryPart
	end
end

workspace.LivingThings.ChildAdded:Connect(function(child)
	for a,b in pairs(Sounds:GetChildren()) do
		b:Clone().Parent = child.PrimaryPart
	end
end)

_G.EffectRemote = game.ReplicatedStorage.Remotes.EffectRemote

function sub(...)
	coroutine.wrap(...)()
end

function HideName(Parent)
	local hideName = script.HideName:Clone()
	hideName.Parent = Parent
	hideName.Disabled = false
end

function chooseGender(player,stats)
	local gend = stats.Gender
	if gend.Value ~= "" then
		return
	end
	
	local choseOption = false
	
	local gui = script.GenderChoose:Clone()
	gui.Parent = player.PlayerGui
	
	local male = gui.Male
	local female = gui.Female
	
	a = male.MouseButton1Click:Connect(function()
		a:disconnect()
		b:disconnect()
		
		gend.Value = "Male"
	end)
	b = female.MouseButton1Click:Connect(function()
		a:disconnect()
		b:disconnect()
		
		gend.Value = "Female"
	end)
	
	gend.Changed:Connect(function()
		if gend.Value ~= "" then
			gui:Destroy()
			choseOption = true
		end
	end)
	repeat wait(.5)
	until choseOption
end

function changeFace(player,stats)
	local character = player.Character
	local gender = stats.Gender
	local alignment = stats.Alignment
	local eyes = stats.EyeVariation
	local mouth = stats.MouthVariation
	
	if gender.Value == "" then
		chooseGender()
		return
	end
	
	local Assets = game.ReplicatedStorage.Assets.Faces
	
	local EyesFolder = Assets.Male
	local MouthFolder = Assets.Mouths.Human
	
	if gender.Value == "Male" then
		EyesFolder = Assets.Male
	elseif gender.Value == "Female" then
		EyesFolder = Assets.Female
	end
	
	if alignment.Value == "Demon" then
		EyesFolder = EyesFolder.Demon.Eyes
		MouthFolder = Assets.Mouths.Demon
	else
		EyesFolder = EyesFolder.Human.Eyes
		MouthFolder = Assets.Mouths.Human
	end
	
	if mouth.Value == "" then
		local MouthNames = {}
		for a,b in pairs(MouthFolder:GetChildren()) do
			table.insert(MouthNames,b.Name)
		end
		mouth.Value = MouthNames[math.random(1,#MouthNames)]
	end
	if eyes.Value == "" then
		local EyeNames = {}
		for a,b in pairs(EyesFolder:GetChildren()) do
			table.insert(EyeNames,b.Name)
		end
		eyes.Value = EyeNames[math.random(1,#EyeNames)]
	end
	
	local EyeDecal = Assets:FindFirstChild(eyes.Value,true)
	local MouthDecal = Assets:FindFirstChild(mouth.Value,true)
	if EyeDecal then
		EyeDecal = EyeDecal:Clone()
		EyeDecal.Name = "Eyes"
		EyeDecal.Parent = character.FacePart
	end
	if MouthDecal then
		MouthDecal = MouthDecal:Clone()
		MouthDecal.Name = "Mouth"
		MouthDecal.Parent = character.FacePart
	end
end

local Players = game.Players
local DSService = game:GetService("DataStoreService")
local Datastore = DSService:GetDataStore("Datastore47")
--local RestoreDatastore = DSService:GetDataStore("Restore1")
local RunService = game:GetService("RunService")

_G.UnbanPlayer = function(id)
	local Data
	for i = 1, 2 do
		local s, e = pcall(function()
			Data = Datastore:GetAsync("Data"..id)
		end)
		if e then
			warn(e)
		end
		if s then
			break
		end
	end
	if Data then
		Data.Banned = false
		print(Data.Banned)
		Datastore:UpdateAsync("Data"..id, function(oldValue)
			return Data.Banned
		end)
	end
end

-- starterdata/settings --

local StarterData = {
	Alignment = "Human";
	Banned = false;
	Outfit = "";
	DemonType = "";
	Trait = "";
	Gender = "";
	KatanaColor = "";
	SheatheColor = "";
	GripColor = "";
	BodyColor = "";
	EyeVariation = "";
	MouthVariation = "";
	WipedNichirinColors = false;
	DemonKills = 0;
	SlayerKills = 0;
	SwordExp = 0;
	FistExp = 0;
	SizeableGrowing = false;
	DestroyedBoulder = false;
	Breathing = false;
	BreathingClass = false;
	BreathingStyle = "";
	FightingStyleGot = false;
	FightingStyle = false;
	FightingClass = "";
	Yen = 100;
	BreathingExp = 0;
	hasCustomHaori = false;
	haoriPattern = 0;
	haoriColorR = 0;
	haoriColorG = 0;
	haoriColorB = 0;
	haoriTransparency = 0;
	haoriX = 1;
	haoriY = 1;
	--Quests = {};
	
	passedFinalSelection = false;
	
	GotRestore = false;
	GotRestore2 = false;
	GotRestore3 = false;
	GotRestore4 = false;
	GotRestore5 = false;
	Wiped = false;
	
	Hybrid = false;
	
	X = 0;
	Y = 0;
	Z = 0;
	
	WIPEDLOCATION = false;
	WipedExile = false;
	WipedExile2 = false;
	WipedExile3 = false;
	
	LastRotation = 0;
	BreathingExp = 1;
	
	HairColor = "";
	
	CompletedQuests = {};
	Tools = {};
	ToolOrder = {};
	
	Height = "";
	
	Rank = "";
	usedFreeWipe = false;
}
--for i, v in pairs(game.ReplicatedStorage['.stats'].LeeIdoI.CompletedQuests:GetChildren()) do print(v.Name) end
local playersavetable = {}
local AUTO_SAVE_INTERVAL = 15;

-- functions --

local function LOADSTARTERDATA(Player)
	--[[if game.ReplicatedStorage[".stats"]:FindFirstChild(Player.Name) then
		return
	end]]
	local stats = Instance.new("Folder")
	stats.Name = Player.Name
	
	for statname, statvalue in pairs(StarterData) do
		if type(statvalue) == 'number' then
			local intvalue = Instance.new("IntValue")
			intvalue.Name = statname
			intvalue.Value = statvalue
			intvalue.Parent = stats
		elseif type(statvalue) == 'boolean' then
			local boolvalue = Instance.new("BoolValue")
			boolvalue.Name = statname
			boolvalue.Value = statvalue
			boolvalue.Parent = stats
		elseif type(statvalue) == 'string' then
			local stringvalue = Instance.new("StringValue")
			stringvalue.Name = statname
			stringvalue.Value = statvalue
			stringvalue.Parent = stats
		elseif statname == "Tools" then
			local Folder = Instance.new("Folder")
			Folder.Name = "Tools"
			Folder.Parent = stats
			for a, b in pairs(StarterData.Tools) do
				local ToolName = Instance.new("StringValue")
				ToolName.Name = b
				ToolName.Parent = Folder
			end
		elseif statname == "CompletedQuests" then
			local Folder = Instance.new("Folder")
			Folder.Name = "CompletedQuests"
			Folder.Parent = stats
			for a, b in pairs(StarterData.CompletedQuests) do
				local ToolName = Instance.new("StringValue")
				ToolName.Name = b
				ToolName.Parent = Folder
			end
		end
	end
	
	stats.Parent = game.ReplicatedStorage[".stats"]
end
local RestoreData = {}
--[[local function loadRestoreData(Player)
	local Retries = 0
	local Data
	for i = 1, 4 do
	local s,e = pcall(function()
		Data = RestoreDatastore:GetAsync("Data"..Player.UserId)
	end)
	if e then
		warn(e)
	end
	if s then
		break
	end
		wait(2)
	end
	if Data then
		RestoreData[Player.Name] = Data
	else
		local playerstats = game.ReplicatedStorage[".stats"]:WaitForChild(Player.Name)
		playerstats.Yen.Value = playerstats.Yen.Value + script.RestoreConfig.Yen.Value
		if playerstats.Alignment.Value == "Slayer" then
			playerstats.DemonKills.Value = playerstats.DemonKills.Value + script.RestoreConfig.DemonKills.Value
		elseif playerstats.Alignment.Value == "Demon" then
			playerstats.SlayerKills.Value = playerstats.SlayerKills.Value + script.RestoreConfig.SlayerKills.Value
		end
		Data = {Restored = true}
		RestoreData[Player.Name] = Data
	end
end
local function saveRestoreData(Player)
	if RunService:IsStudio() then return end
	if game.PrivateServerId ~= "" then
		return
	end
	if not RestoreData[Player.Name] then
		return
	end
	
	for i = 1, 4 do
		
	local s, e = pcall(function()
		Datastore:UpdateAsync("Data"..Player.UserId, function(oldValue)

			return RestoreData[Player.Name]
		end)
		--Datastore:SetAsync("Data"..Player.UserId,RestoreData[Player.Name])
	end)
	if s then
		break
	else
		warn(e)
	end
	wait(2.5)
	end
end--]]
local function loadData(Player)
	local stats = game.ReplicatedStorage[".stats"]:FindFirstChild(Player.Name)
	if stats then
		stats:Destroy()
	end
	LOADSTARTERDATA(Player)
	wait(10)
	stats = game.ReplicatedStorage[".stats"]:FindFirstChild(Player.Name)
	local Retries = 0
	local Data
	local s,e = pcall(function()
		Data = Datastore:GetAsync("Data"..Player.UserId)
	end)
	if e then
		warn(e)
	end
	local function createready()
		print("Created ready")
		local ready = Instance.new("BoolValue")
		ready.Name = "Ready"
		ready.Parent = stats
	end
	if Data then
		local PlayerStatsFolder = game.ReplicatedStorage[".stats"]:WaitForChild(Player.Name)
		for statname, statvalue in pairs(Data) do
			if statname == "Tools" then
				for a, b in pairs(Data.Tools) do
					local ToolName = Instance.new("StringValue")
					ToolName.Name = b
					ToolName.Parent = PlayerStatsFolder.Tools
				end
			elseif statname == "CompletedQuests" then
				for a, b in pairs(Data.CompletedQuests) do
					local ToolName = Instance.new("StringValue")
					ToolName.Name = b
					ToolName.Parent = PlayerStatsFolder.CompletedQuests
				end
			else
				if PlayerStatsFolder:FindFirstChild(statname) then
					PlayerStatsFolder[statname].Value = statvalue
				end
			end
		end
		warn(Player.Name.."'s data has been loaded")
		createready()
	else
		warn("Player, "..Player.Name.." does not have any data.")
		createready()
	end
	--[[if Data and Data.Banned == true then
		Player:Kick("BANNNNNNNNNNNNNED")
	end--]]
end

function saveData(Player)
	if RunService:IsStudio() then return end
	if game.PrivateServerId ~= "" and not _G.isRanked then
		return
	end
	local pData = {}
	local pStats = game.ReplicatedStorage[".stats"]:FindFirstChild(Player.Name)
	if not pStats then
		return
	end
	if not pStats:FindFirstChild("Ready") then
		return
	end
	
	for _, stat in pairs(pStats:GetChildren()) do
		if stat.Name ~= "Tools" and stat.Name ~= "CompletedQuests" then
			pData[stat.Name] = stat.Value
		end
	end
	
	local t = {}
	for _, tool in pairs(pStats.Tools:GetChildren()) do
		table.insert(t,tool.Name)
	end
	
	pData.Tools = t
	
	local q = {}
	for _, quest in pairs(pStats.CompletedQuests:GetChildren()) do
		table.insert(q,quest.Name)
	end
	
	pData.CompletedQuests = q
	local s, e = pcall(function()
		--Datastore:SetAsync("Data"..Player.UserId,pData)
		Datastore:UpdateAsync("Data"..Player.UserId, function(oldValue)
			return pData
		end)
	end)
	if s then
		warn(Player.Name.."'s data has been successfully saved.")
	else
		warn(e)
	end
end

-- loadit -

local Spawns = workspace.Spawns
local Demon = Spawns.Demon:GetChildren()
local Slayer = Spawns.Slayer:GetChildren()
local Human = Spawns.Human:GetChildren()

local TeleportMapEnabled = false

function getBackpackToolPosition(player)
	local backpack = player:WaitForChild("Backpack")
	local tool1,tool2,tool3,tool4,tool5,tool6,tool7,tool8,tool9
	tool1,tool2,tool3,tool4,tool5,tool6,tool7,tool8,tool9 = unpack(backpack:GetChildren())
	
	local tools = {}
	tools[1] = tool1
	tools[2] = tool2
	tools[3] = tool3
	tools[4] = tool4
	tools[5] = tool5
	tools[6] = tool6
	tools[7] = tool7
	tools[8] = tool8
	tools[9] = tool9--]]
	
	print(tool1,tool2,tool3)
	return tools
end

game.Players.PlayerAdded:Connect(function(player)
	local Ready = false
	spawn(function()
		loadData(player)
		Ready = true
		--loadRestoreData(player)
	end)
	
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = player
	
	local RankValue = Instance.new("StringValue")
	RankValue.Name = "Rank"
	RankValue.Parent = leaderstats
	
	player.CharacterAdded:Connect(function(Character)
		repeat wait(.5)
		until Ready
		
	local Stats = game.ReplicatedStorage[".stats"]:FindFirstChild(player.Name)
	--[[if player and not Stats then
		LOADSTARTERDATA(player)
		wait(1)
		loadData(player)
	end--]]
	
		--[[if game.ServerScriptService.GroupId.Value ~= "" then
		if not player:IsInGroup(tonumber(game.ServerScriptService.GroupId.Value)) and not _G.IsWhitelisted(player) then
			player:Kick("Group access only.")
			return
		end
		end--]]
	--[[if Stats.WIPEDLOCATION.Value == false then
		Stats.WIPEDLOCATION.Value = true
		Stats.X.Value = 0
		Stats.Y.Value = 0
		Stats.Z.Value = 0
	end--]]
	
	if Stats.BodyColor.Value == "" then
	local bodycolors = script.BodyColors:GetChildren()
	Stats.BodyColor.Value = tostring(bodycolors[math.random(1,#bodycolors)].HeadColor)
	end
	
	if Stats.Outfit.Value == "FlameSuccessor" or Stats.Outfit.Value == "Kimono" or Stats.Outfit.Value == "Luffy" or Stats.Outfit.Value == "TanjiroOutfit" or Stats.Outfit.Value == "ThunderSuccessor" then
		Stats.Outfit.Value = ""
	end
	
	Character.Humanoid.WalkSpeed = Character:WaitForChild("BaseSpeed").Value
	Character.Humanoid.JumpPower = Character:WaitForChild("JumpPower").Value
	
	-- Hair color appearance --
	
	local HairColors = require(script.HairColors)
	if Stats.HairColor.Value == "" then
		local RandomColor = HairColors[math.random(1,#HairColors)]
		Stats.HairColor.Value = RandomColor
	end
	
	if Stats.FightingStyle.Value == true and Stats.FightingClass.Value == "BoarFighting" then
		if not Stats.Tools:FindFirstChild("Low Kick") then
			local ItemModule = require(game.ServerScriptService.Modules.ItemModule)
			ItemModule.GiveItem(player,"Low Kick")
		end
	end
	
	--Setting up hairs...--
	
	local PlayerInfo = _G.GetPlayerAppearanceInfo(player,Stats)
	
	for name, object in pairs(PlayerInfo) do
		if name == "Hair" or name == "Accessories" then
			for _,accessory in pairs(object) do
				local newObject = accessory:Clone()
				local specialMesh = newObject.Handle:FindFirstChildWhichIsA("SpecialMesh")
				newObject.Handle.BrickColor = BrickColor.new(Stats.HairColor.Value)
				if specialMesh then
					specialMesh.TextureId = "rbxassetid://652531618"
					specialMesh.VertexColor = Vector3.new(newObject.Handle.Color.r,newObject.Handle.Color.g,newObject.Handle.Color.b)
				end
				newObject:Clone().Parent = Character
			end
		else
			if name ~= "Body Colors" then
			object:Clone().Parent = Character
			end
		end
	end
	
	--[[if Stats.WipedExile3.Value == false and Stats.Rank.Value == "Exile" then
		Stats.Rank.Value = "Human"
		Stats.WipedExile3.Value = true
		Stats.Hybrid.Value = false
		Stats.Trait.Value = ""
	end--]]
	
	--     --
	local specs = game.ServerStorage.Specs:FindFirstChild(player.Name)
	--[[local faces = {"Happy";"Neutral";"Sad";}
	--local face = script:FindFirstChild(faces[math.random(1,#faces)]):Clone()
	local face = script.NewFace:Clone()
	Character.FacePart.Face.Texture = face.Texture
	
	if Stats.Alignment.Value == "Demon" and not specs then
		--Character.FacePart.Face.Color3 = Color3.fromRGB(253,102,102)
	end--]]
	
	Character.Parent = workspace.LivingThings
	
	if Stats.Trait.Value == "" then
		local Traits = require(script.Traits)
		Stats.Trait.Value = Traits[math.random(1,#Traits)]
	end
	
	if Stats.Alignment.Value == "" then
		local Alignments = require(script.StarterAlignments)
		Stats.Alignment.Value = Alignments[math.random(1,#Alignments)]
	end
	
	if Stats.Alignment.Value == "Demon" and Stats.DemonType.Value == "" then
		local Demons = require(script.DemonTypes)
		Stats.DemonType.Value = Demons[math.random(1,#Demons)]
	end
	
	if Stats.Outfit.Value == "" then
		local First = {"Black";"White";"Yellow";}
		Stats.Outfit.Value = First[math.random(1,#First)].."Freshspawn"
	end
	
	if Stats.Height.Value == "" then
		local Height = {"Tall";"Short"}
		Stats.Height.Value = Height[math.random(1,#Height)]
	end
	
	if Stats.Trait.Value == "Smell" then
		if Stats.Alignment.Value == "Demon" then
			if Stats.Tools:FindFirstChild("Smell") then
				Stats.Tools:FindFirstChild("Smell"):Destroy()
			end	
			if not Stats.Tools:FindFirstChild("Hunt") then
			local tool = Instance.new("StringValue")
			tool.Name = "Hunt"
			tool.Parent = Stats.Tools
			end
		else
			if not Stats.Tools:FindFirstChild("Smell") and Stats.Alignment.Value ~= "Demon" then
			local tool = Instance.new("StringValue")
			tool.Name = "Smell"
			tool.Parent = Stats.Tools
			end
		end
	end
	
	if Stats.Alignment.Value == "Demon" and not Stats.Tools:FindFirstChild("Flash") then
		local tool = Instance.new("StringValue")
		tool.Name = "Flash"
		tool.Parent = Stats.Tools
	end
	
	if Stats.WipedNichirinColors.Value == false then
		Stats.WipedNichirinColors.Value = true
		Stats.KatanaColor.Value = ""
		Stats.SheatheColor.Value = ""
		Stats.GripColor.Value = ""
	end
	
	if Stats.KatanaColor.Value == "" then
		Stats.KatanaColor.Value = tostring(BrickColor.random())
	end
	if Stats.SheatheColor.Value == "" then
		Stats.SheatheColor.Value = tostring(BrickColor.random())
	end
	if Stats.GripColor.Value == "" then
		Stats.GripColor.Value = tostring(BrickColor.random())
	end
	
	local X = Stats.X
	local Y = Stats.Y
	local Z = Stats.Z
	
	if Stats.Alignment.Value == "Demon" then
		if Stats.Hybrid.Value == false then
			if Stats.Tools:FindFirstChild("Katana") then
				Stats.Tools:FindFirstChild("Katana"):Destroy()
			end
			if Stats.Tools:FindFirstChild("Nichirin Katana") then
				Stats.Tools:FindFirstChild("Nichirin Katana"):Destroy()
			end
			if not Stats.Tools:FindFirstChild("Take Blood") then
				local tool = Instance.new("StringValue")
				tool.Name = "Take Blood"
				tool.Parent = Stats.Tools
			end
		end
		if Stats.Hybrid.Value == true then
			Stats.Trait.Value = "HybridSlayer"
		end
		if Stats.Rank.Value == "Exile" then
			Stats.Rank.Value = "Demon"
		end
		
		if not game["Run Service"]:IsStudio() and not _G.isRanked then
		if (X.Value == 0 and Y.Value == 0 and Z.Value == 0) or player:FindFirstChild("Death") then
			Character.HumanoidRootPart.CFrame = Demon[math.random(1,#Demon)].CFrame
		else
			Character.HumanoidRootPart.CFrame = CFrame.new(X.Value,Y.Value,Z.Value)
		end--]]
		end
	elseif Stats.Alignment.Value == "Human" or Stats.Alignment.Value == "Slayer" then
		if not game["Run Service"]:IsStudio() and not _G.isRanked then
		if (X.Value == 0 and Y.Value == 0 and Z.Value == 0) or player:FindFirstChild("Death") then
			Character.HumanoidRootPart.CFrame = Human[math.random(1,#Human)].CFrame
		else
			Character.HumanoidRootPart.CFrame = CFrame.new(X.Value,Y.Value,Z.Value)
		end
		if Stats.hasCustomHaori.Value == true then
			Stats.Outfit.Value = "customHaori"
			if not Character:FindFirstChild("haoriPattern") then
				local pattern = script.Parent.TailorService.haoriPattern:Clone()
				pattern.Parent = Character
			end
			wait(0.125)
			for _, child in pairs(Character:FindFirstChild("haoriPattern"):GetChildren()) do
				local weld = Instance.new("Weld", child.center)
				weld.Part0 = child.center
				weld.Part1 = Character[child.Name]
			end
			for _, child in pairs(Character:FindFirstChild("haoriPattern"):GetChildren()) do
				child["_"].Color = Color3.fromRGB(Stats.haoriColorR.Value, Stats.haoriColorG.Value, Stats.haoriColorB.Value)
				for _, otherChild in pairs(child["_"]:GetChildren()) do
					if otherChild.Name == "pattern" then
						if Stats.haoriPattern.Value ~= 0 then
							otherChild.Texture = "https://www.roblox.com/asset-thumbnail/image?assetId="..Stats.haoriPattern.Value.."&width=420&height=420&format=png"
						end
						otherChild.Transparency = Stats.haoriTransparency.Value
						otherChild.StudsPerTileU = Stats.haoriX.Value
						otherChild.StudsPerTileV = Stats.haoriY.Value
					end
				end
			end
		end	
	end
	
	end
	
	spawn(function()
		wait(1)
		if game["Run Service"]:IsStudio() then
			Character.HumanoidRootPart.CFrame = workspace.Spawns.StudioSpawn.CFrame
		end
	end)--]]
	
	chooseGender(player,Stats)
	if not specs then
		changeFace(player,Stats)
	end
	
	--Character.HumanoidRootPart.CFrame = CFrame.new(Character.HumanoidRootPart.Position,Vector3.new(X.Value,Y.Value,Z.Value))
	
	if Stats.Rank.Value == "" then
		Stats.Rank.Value = "Human"
	end
	
	if Stats.Alignment.Value == "Demon" and (Stats.Rank.Value == "Human" or Stats.Rank.Value == "Slayer") then
		Stats.Rank.Value = "Demon"
	end
	
	--[[if Stats.GotRestore.Value == false then
		Stats.Yen.Value = Stats.Yen.Value + 5000
		Stats.DemonKills.Value = Stats.DemonKills.Value + 5
		Stats.SlayerKills.Value = Stats.SlayerKills.Value + 5
		Stats.SwordExp.Value = Stats.SwordExp.Value + 1000
		Stats.FistExp.Value = Stats.FistExp.Value + 1000
		Stats.GotRestore.Value = true
	end--]]
	--[[if Stats.GotRestore5.Value == false then
		Stats.Yen.Value = Stats.Yen.Value + 100
		Stats.DemonKills.Value = Stats.DemonKills.Value + 10
		Stats.SlayerKills.Value = Stats.SlayerKills.Value + 10
		Stats.SwordExp.Value = Stats.SwordExp.Value + 400
		Stats.FistExp.Value = Stats.FistExp.Value + 400
		Stats.GotRestore5.Value = true
	end--]]
	
	RankValue.Value = Stats.Rank.Value
	Stats.Rank.Changed:Connect(function()
		RankValue.Value = Stats.Rank.Value
	end)
	
	local RankProgression = require(script.RankProgression)
	RankProgression(player,Stats)
	
	if player:FindFirstChild("Death") then
		player:FindFirstChild("Death"):Destroy()
	end
	
	local ReadyToLoadPosition = Instance.new("Folder")
	ReadyToLoadPosition.Name = "ReadyToLoadPosition"
	ReadyToLoadPosition.Parent = Character
	
	local m = require(game.ServerScriptService.Modules.UpdateModule)
	m:UpdateOufit(player.Character,Stats.Outfit.Value)
	m:UpdateBackpack(player)
	m:UpdateDemon(player)
	
	Stats.Outfit.Changed:Connect(function()
		m:UpdateOufit(player.Character,Stats.Outfit.Value)
	end)
	
	Stats.Tools.ChildAdded:Connect(function()
		m:UpdateBackpack(player)
	end)
	
	Stats.Alignment.Changed:Connect(function()
		if Stats.Alignment.Value == "Demon" then
			Stats.EyeVariation.Value = ""
			Stats.MouthVariation.Value = ""
			local Demons = require(script.DemonTypes)
			Stats.DemonType.Value = Demons[math.random(1,#Demons)]
		end
	end)
	
	Stats.DemonType.Changed:Connect(function()
		m:UpdateDemon(player)
	end)
	if not specs and Character:FindFirstChild("BodyColor") then
		script.BodyColor:Clone().Parent = Character
		local Color = BrickColor.new(Stats.BodyColor.Value)
		Character.BodyColor.HeadColor = Color
		Character.BodyColor.LeftArmColor = Color
		Character.BodyColor.LeftLegColor = Color
		Character.BodyColor.RightArmColor = Color
		Character.BodyColor.RightLegColor = Color
		Character.BodyColor.TorsoColor = Color
	end
	m:UpdateSpecs(player)
	
	Character.BaseMaxHealth.Value = Character.Humanoid.MaxHealth
	
	if Stats.Alignment.Value == "Demon" then
	local DemonDeath = Instance.new("BoolValue")
	DemonDeath.Name = "DemonDeath"
	DemonDeath.Parent = Character
	
	local dashbuff = Instance.new("BoolValue")
	dashbuff.Name = "RunBuff"
	dashbuff.Parent = Character.Effects
	
	local DemonProgression = require(script.DemonProgression)
		DemonProgression(Stats)
	Stats.SlayerKills.Changed:Connect(function()
		DemonProgression(Stats)
	end)
	end
	
	local HeightModule = require(game.ServerScriptService.Modules.HeightModule)
	HeightModule.ChangeHeight(Character,Stats.Height.Value)
	Stats.Height.Changed:Connect(function()
		HeightModule.ChangeHeight(Character,Stats.Height.Value)
	end)
	
	RankProgression(player,Stats)
	Stats.SlayerKills.Changed:Connect(function()
		RankProgression(player,Stats)
	end)
	Stats.DemonKills.Changed:Connect(function()
		RankProgression(player,Stats)
	end)
end)
end)

function playerRemoving(player,argument)
	if game.PrivateServerId ~= "" then
		return
	end
	wait(1)
	if ServerShutdown then
		return
	end
	local Stats = game.ReplicatedStorage[".stats"]:FindFirstChild(player.Name)
	if not argument and not _G.isRanked and not ServerShutdown then
		if player:FindFirstChild("InCombat") and player:FindFirstChild("InCombat").Value == true and not ServerShutdown then
			Stats.X.Value = 0
			Stats.Y.Value = 0
			Stats.Z.Value = 0
			
			Stats.Yen.Value = Stats.Yen.Value/2
			
			Stats.DemonKills.Value = Stats.DemonKills.Value - Stats.DemonKills.Value / 20
			Stats.SlayerKills.Value = Stats.SlayerKills.Value - Stats.SlayerKills.Value / 20
			if Stats.DemonKills.Value < 0 then
				Stats.DemonKills.Value = 0
			end
			if Stats.SlayerKills.Value < 0 then
				Stats.SlayerKills.Value = 0
			end
		end
	end
	saveData(player)
end

if not game["Run Service"]:IsStudio() then
	game:BindToClose(function()
		ServerShutdown = true
		for _,Player in pairs(Players:GetPlayers()) do
			if Player:FindFirstChild("InCombat") then
				Player.InCombat.Value = false
			end
		end
		for _,Player in pairs(Players:GetChildren()) do
			saveData(Player)
		end
		wait(5)
	end)
end

game.Players.PlayerRemoving:Connect(playerRemoving)

while wait(AUTO_SAVE_INTERVAL) do
	for _,Player in pairs(Players:GetPlayers()) do
		saveData(Player)
	end
end--]]