repeat wait()
until game.Players.LocalPlayer.Character
local character = game.Players.LocalPlayer.Character

function sub(...)
	coroutine.wrap(...)()
end
script.Parent.MoveGui.Enabled = true
local MoveLabel = script.Parent.MoveGui.Frame.MoveLabel
MoveLabel.Parent = nil

local BackpackGui = script.Parent.MoveGui

local BackpackUI = BackpackGui.Backpack
local BackpackSlots = BackpackUI.BackpackSlots

local BackpackSlotTemplate = BackpackSlots.Frame:Clone()
BackpackSlots.Frame.Parent = nil

local MouseInBackpack = false
local MouseEnterButton = false

local SpreadBackpack = false
local Selected

local humanoid = character:WaitForChild("Humanoid")
local uis = game:GetService("UserInputService")

local _input = 
{
	["One"] = {txt = "1";name = "One";};
	["Two"] = {txt = "2";name = "Two";};
	["Three"] = {txt = "3";name = "Three";};
	["Four"] = {txt = "4";name = "Four";};
	["Five"] = {txt = "5";name = "Five";};
	["Six"] = {txt = "6";name = "Six";};
	["Seven"] = {txt = "7";name = "Seven";};
	["Eight"] = {txt = "8";name = "Eight";};
	["Nine"] = {txt = "9";name = "Nine";};
	["Zero"] = {txt = "0";name = "Zero";};
}

local InBackpack = {
}

local inputOrder = 
{
	_input.One;
	_input.Two;
	_input.Three;
	_input.Four;
	_input.Five;
	_input.Six;
	_input.Seven;
	_input.Eight;
	_input.Nine;
	_input.Zero;
}

function EquipTool(tool)
	if tool then
		if tool.Parent ~= character and tool.Parent == game.Players.LocalPlayer.Backpack then
			humanoid:EquipTool(tool)
		else
			humanoid:UnequipTools()
		end
	end
end

function createIcon()
	local toShow = #inputOrder
	
	for i = 1, #inputOrder do
		local value = inputOrder[i]
		local frame = MoveLabel:Clone()
		frame.Parent = script.Parent.MoveGui.Frame
		frame.MoveNumber.Text = value["txt"]
		frame.Name = value["txt"]
		frame.Visible = true
		frame.Equipped.Visible = false
		
		value["frame"] = frame
		frame.MouseEnter:Connect(function()
			MouseEnterButton = true
		end)
		frame.MouseLeave:Connect(function()
			MouseEnterButton = false
		end)
		frame.MouseButton1Down:Connect(function()
			local tool = value["tool"]
			for key, value in pairs(_input) do
				if value["txt"] == frame.Name then
					EquipTool(value["tool"])
				end
			end
			if Selected ~= tool and Selected and tool then
				switchOrder(Selected,tool)
			elseif Selected and tool == nil then
				switchOrder(Selected,value["name"])
			elseif Selected == tool then
				Selected = nil
			else
				Selected = tool
			end
		end)
	end
end

function setup()
	local tools = game.Players.LocalPlayer.Backpack:GetChildren()
	for i, v in pairs(tools) do
		if v.ClassName == "Tool" then
			local foundslot = false
		for i = 1,#inputOrder do
			local value = inputOrder[i]
			if not value["tool"] then
				value["tool"] = tools[i]
				foundslot = true
				break
			end
		end
		if not foundslot then
			InBackpack[v] = {tool = v; frame = nil;}
		end
		end
	end
	createIcon()
	adjust()
end

function adjust()
	for key, value in pairs(_input) do
		local tool = value["tool"]
		local icon = script.Parent.MoveGui.Frame:FindFirstChild(value["txt"])
		if tool then
			if not tool then
			icon.MoveTitle.Text = ""
			else
			icon.MoveTitle.Text = tool.Name
			end
			if tool.Parent == character then
			icon.BorderSizePixel = 5
			else
			icon.BorderSizePixel = 0
			end
		else
			icon.MoveTitle.Text = ""
			icon.Equipped.Visible = false
			icon.BorderSizePixel = 0
		end
	end
	for a,b in pairs(InBackpack) do
		local tool = b["tool"]
		local frame = b["frame"]
		
		if tool and not frame then
			b.frame = BackpackSlotTemplate:Clone()
			frame = b.frame
			frame.Parent = BackpackUI.BackpackSlots
			frame.ToolName.Text = tool.Name
			frame.MouseEnter:Connect(function()
				MouseEnterButton = true
			end)
			frame.MouseLeave:Connect(function()
				MouseEnterButton = false
			end)
			frame.MouseButton1Down:Connect(function()
				tool = b["tool"]
				if Selected ~= tool and Selected then
					switchOrder(Selected,tool)
				elseif Selected == tool then
					Selected = nil
				else
					Selected = tool
				end
			end)
		end
		if tool and frame then
			frame.ToolName.Text = tool.Name
		end
	end
end

function onKeyPress(input)
	local key = input.KeyCode.Name
	local value = _input[key]
	if value and not uis:GetFocusedTextBox() then
		EquipTool(value["tool"])
	end
end

function handleAddition(adding)
	if adding:IsA("Tool") then
		local new = true
		for key, value in pairs(_input) do
			local tool = value["tool"]
			if tool then
				if tool == adding then
					new = false
				end
			end
		end
		
		for key, value in pairs(InBackpack) do
			local tool = value["tool"]
			if tool then
				if tool == adding then
					new = false
				end
			end
		end
		
		if new then
			local foundslot = false
			for i = 1, #_input do
				local tool = _input[i]["tool"]
				if not tool then
					foundslot = true
					_input[i]["tool"] = adding
					break
				end
			end
			if not foundslot then
				InBackpack[adding] = {tool = adding; frame = nil;}
			end
		end
		
		adjust()
	end
end

function handleRemoval(removing)
	if removing:IsA("Tool") then
		if removing.Parent ~= character and removing.Parent ~= game.Players.LocalPlayer.Backpack then
			for i = 1, #inputOrder do
				if inputOrder[i]["tool"] == removing then
					inputOrder[i]["tool"] = nil
					local frame = inputOrder[i]["tool"]
					if frame then
						frame.BorderSizePixel = 0
					end
					break
				end
			end
			for a, b in pairs(InBackpack) do
				if b and b["tool"] then
					if b["tool"] == removing then
						b["tool"] = nil
						local frame = b["frame"]
						if frame then
							frame:Destroy()
						end
					end
				end
			end
		end
		
		adjust()
	end
end

function OpenBackpack(input)
	if input.KeyCode == Enum.KeyCode.Backquote then
		SpreadBackpack = not SpreadBackpack
		BackpackUI.Visible = SpreadBackpack
		script.Parent.Base.Enabled = not SpreadBackpack
		if not SpreadBackpack then
			Selected = nil
		end
	end
end

function MoveToolInBackpack(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		if Selected and MouseInBackpack then
			switchOrder(Selected,"Backpack")
		end
	end
end

function switchOrder(tool1,tool2)
	
	local inputTool1
	local inputTool2
	
	local function searchBackpack(tool)
		local ret
		for a,b in pairs(InBackpack) do
			if b and b["tool"] then
				if b["tool"] == tool then
					ret = b
					break
				end
			end
		end
		for a,b in pairs(_input) do
			if b and b["tool"] then
				if b["tool"] == tool then
					ret = b
					break
				end
			end
		end
		return ret
	end
	inputTool1 = searchBackpack(tool1)
	inputTool2 = searchBackpack(tool2)
	
	if inputTool1 and inputTool2 then
		if inputTool1["frame"] then
		inputTool1["frame"]:Destroy()
		end
		if inputTool2["frame"] then
		inputTool2["frame"]:Destroy()
		end
		
		local temp = inputTool1["tool"]
		inputTool1["tool"] = inputTool2["tool"]
		inputTool2["tool"] = temp
		
		adjust()
		Selected = nil
		humanoid:UnequipTools()
		return
	end
	
	if inputTool1 and tool2 == "Backpack" then
		local foundInBackpack = false
		for a,b in pairs(InBackpack) do
			local tool = b["tool"]
			if tool then
				if tool == inputTool1["tool"] then
					foundInBackpack = true
				end
			end
		end
		if not foundInBackpack then
			local temptool = inputTool1["tool"]
			
			inputTool1["tool"] = nil
			InBackpack[temptool] = {tool = temptool; frame = nil}
			adjust()
		else
			return
		end
	else
		if not inputTool2 then
			local slot = _input[tool2]
			if slot then
				local temp = inputTool1["tool"]
				
				local foundInBackpack = false
				for a,b in pairs(InBackpack) do
					local tool = b["tool"]
					if tool then
						if tool == inputTool1["tool"] then
							foundInBackpack = true
						end
					end
				end
				if foundInBackpack then
					if inputTool1["frame"] then
						inputTool1["frame"]:Destroy()
					end
				end
				
				inputTool1["tool"] = nil
				_input[tool2].tool = temp
				adjust()
			end
		end
	end
	Selected = nil
	humanoid:UnequipTools()
end

sub(function()
	BackpackUI.MouseEnter:Connect(function()
		MouseInBackpack = true
	end)
	BackpackUI.MouseLeave:Connect(function()
		MouseInBackpack = false
	end)
end)

uis.InputBegan:Connect(onKeyPress)
uis.InputBegan:Connect(OpenBackpack)
uis.InputBegan:Connect(MoveToolInBackpack)

character.ChildAdded:Connect(handleAddition)
character.ChildRemoved:Connect(handleRemoval)

local Backpack = game.Players.LocalPlayer.Backpack

Backpack.ChildAdded:Connect(handleAddition)
Backpack.ChildRemoved:Connect(handleRemoval)
setup()
game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Backpack,false)
sub(function()
	while wait(1) do
		for a,b in pairs(InBackpack) do
			print(a)
		end
	end
end)
game["Run Service"].RenderStepped:Connect(function()
	for a, b in pairs(_input) do
		local toolValue = b["tool"]
		local frame = b["frame"]
		if toolValue and frame then
			if SpreadBackpack then
				frame.BorderColor3 = Color3.fromRGB(255,255,10)
			else
				frame.BorderColor3 = Color3.fromRGB(15,128,255)
			end
			if SpreadBackpack then
			if Selected == toolValue then
				frame.BorderSizePixel = 5
			else
				frame.BorderSizePixel = 0
			end
			end
		end
	end
	
	for a, b in pairs(InBackpack) do
		local toolValue = b["tool"]
		local frame = b["frame"]
		if toolValue and frame then
			if SpreadBackpack then
				frame.BorderColor3 = Color3.fromRGB(255,255,10)
			else
				frame.BorderColor3 = Color3.fromRGB(15,128,255)
			end
			if SpreadBackpack then
			if Selected == toolValue then
				frame.BorderSizePixel = 5
			else
				frame.BorderSizePixel = 0
			end
			end
		end
	end	
end)